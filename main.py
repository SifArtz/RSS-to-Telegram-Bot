import logging
import telegram
import re
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
)
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import requests

TOKEN = '6762845101:AAFycl3cDPrbveCUELVT5qe94oIcpb6rwcM'
shortened_urls = []
allowed_user_ids = ['6689901817', '1048039908', '6691449487','6828649649', '6727112006']
user_names = {
    '6689901817': '–†—É—Å–ª–∞–Ω',
    '6828649649': '–ú–∏—à–∞',
    '6727112006': '–ü–∞—à–∞'
}
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)

logger.addHandler(handler)
def start(update, context):
    user_id = update.effective_user.id
    buttons = [
        [
            InlineKeyboardButton("–Ø–∑—ã–∫", callback_data="language"),
            InlineKeyboardButton("–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="short"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    context.bot.send_message(
        chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup
    )
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞–ª–∏–¥
def validate_url(url):
    pattern = re.compile(
        r'^https?://'  # http:// or https://
        r'(?:[\w-]+\.)*'  # sub-domains
        r'(?:[\w-]+)'  # domain name
        r'(?:\.[a-zA-Z]{2,63})?'  # dot and top-level domain
        r'(?:/[\w-]*)*'  # path
    )
    return re.match(pattern, url) is not None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /—è–∑—ã–∫
def language(update, context):
    query = update.callback_query
    user_id = query.from_user.id
    if str(user_id) not in allowed_user_ids:
        context.bot.answer_callback_query(
            callback_query_id=query.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞.")
        return button_callback(update, context)
    buttons = [
        [
            InlineKeyboardButton("–ò—Å–ø–∞–Ω—Å–∫–∏–π", callback_data="russian"),
            InlineKeyboardButton("–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", callback_data="french"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    context.bot.edit_message_text(
        chat_id=user_id,
        message_id=query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=reply_markup,
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /short
def shorten_url(update, context):
    query = update.callback_query
    user_id = query.from_user.id
    if str(user_id) not in allowed_user_ids:
        context.bot.answer_callback_query(
            callback_query_id=query.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞.")
        return button_callback(update, context)
    context.bot.send_photo(
        chat_id=user_id,
        photo="https://sun9-60.userapi.com/impg/ppK7P7hG18lYlLIqsd9Sus6UYFJ0lFqKx0jOcQ/JENIeG2glzM.jpg?size=426x116&quality=96&sign=2352b7c085e805fc51d7fec2be5043d1&type=album",
        caption="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (–∫–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏): "
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ —Ñ–∞–π–ª –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_language(user_id, language):
    updated = False
    with open("language.txt", "r+", encoding='cp1251') as file:
        lines = file.readlines()
        file.seek(0)
        for line in lines:
            if line.startswith(str(user_id)):
                file.write(f"{user_id}:{language}\n")
                updated = True
            else:
                file.write(line)
        if not updated:
            file.write(f"{user_id}:{language}\n")
        file.truncate()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
def get_language(user_id):
    with open("language.txt", "r", encoding='cp1251') as file:
        for line in file:
            if line.startswith(str(user_id)):
                return line.strip().split(":")[1]
    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return "—Ä—É—Å—Å–∫–∏–π"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
def shorten_link(original_url):

    url = "http://vlnted.shop/yourls-api.php"
    params = {
        "signature": "f4e86197fc",
        "action": "shorturl",
        "url": original_url,
    }

    response = requests.get(url, params=params)
    data = response.text

    start_index = data.find("<shorturl>") + len("<shorturl>")
    end_index = data.find("</shorturl>")

    short_url = data[start_index:end_index]




    return short_url



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def button_callback(update, context):
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == "language":
        language(update, context)
    elif query.data == "short":
        shorten_url(update, context)
    elif str(user_id) not in allowed_user_ids:
        context.bot.answer_callback_query(
            callback_query_id=query.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞.")
        return button_callback(update, context)

    elif query.data == "russian":
        save_language(user_id, "—Ä—É—Å—Å–∫–∏–π")
        context.bot.answer_callback_query(
            callback_query_id=query.id, text="–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: –∏—Å–ø–∞–Ω—Å–∫–∏–π"
        )
        context.bot.delete_message(chat_id=user_id, message_id=query.message.message_id)
        return start(update, context)
    elif query.data == "french":
        save_language(user_id, "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π")
        context.bot.answer_callback_query(
            callback_query_id=query.id, text="–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"

        )
        context.bot.delete_message(chat_id=user_id, message_id=query.message.message_id)
        return start(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update, context):

    user_id = update.effective_user.id
    user_id = str(update.effective_user.id)
    user_name = user_names.get(user_id, '–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∏–º—è) –≤ –ª–æ–≥
    logger.info(f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è: {user_name}')
    language = get_language(user_id)
    lines = update.message.text.strip().split("\n")

    for line in lines:

        if validate_url(line):


            for line in lines:
                short_url = shorten_link(line)
                if language == '—Ä—É—Å—Å–∫–∏–π':
                    context.bot.send_message(chat_id=user_id, text=f'''Hola ‚úã

üì£ Vinted te informa que tu art√≠culo ha sido comprado por el usuario.

üíå El usuario ha realizado el pago de este producto y la entrega a domicilio por mensajer√≠a.

üì≤ Por favor sigue el enlace al formulario: {short_url}

‚úèÔ∏è Pasos a seguir para recibir el pago de un art√≠culo:

Completa la informaci√≥n solicitada en el formulario. Una vez confirmada la venta, recibir√°s instrucciones de un representante de soporte. Ellos le guiar√°n a trav√©s de los pasos necesarios para recibir su pago. Haga clic en el enlace anterior ‚§¥Ô∏è para completar el formulario.

Vintedüíö le desea mucho √©xito con su venta.
''')
                elif language == '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π':
                    context.bot.send_message(chat_id=user_id, text=f'''Bonjour ‚úã

üì£ Vinted vous informe que votre article a √©t√© achet√© par l'utilisateur.

üíå L'utilisateur a effectu√© le paiement pour ce produit et la livraison √† domicile par coursier.

üì≤ Veuillez suivre le lien vers le formulaire : {short_url}

‚úèÔ∏è √âtapes √† suivre pour recevoir le paiement d'un article :

Compl√©tez les informations requises sur le formulaire. Une fois la vente confirm√©e, vous recevrez des instructions d'un repr√©sentant de l'assistance. Ce dernier vous guidera √† travers les √©tapes n√©cessaires pour recevoir votre paiement. Cliquez sur le lien ci-dessus ‚§¥Ô∏è pour compl√©ter le formulaire.

Vintedüíö vous souhaite beaucoup de succ√®s dans votre vente!
''')


        else:
            context.bot.send_message(chat_id=user_id, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞")
            return start(update, context)

        




def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–æ–º–∞–Ω–¥
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher


    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(CallbackQueryHandler(button_callback))


    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
